#include<reg552.h>
#include<stdio.h>
unsigned char scrutation_clavier(void);
unsigned char Transcodage(unsigned char code_Touche);
void tempo_variable(void);
void tempo10ms(unsigned short i);
void decalage_gauche(void);
void decalage_droite(void);


void main(void)
{
	unsigned char var, nb;
	while(1)
	{
    	var = scrutation_clavier();
    	nb = Transcodage (var);
		P1 = 0b00000011;
	
		while((P1&(1<<7))!=0){}
		
		if (nb==0x)
		{
			decalage_gauche();
		}
		else{}
		
		if (nb==0x)
		{
			decalage_droite();
		}
		else{}
		
		tempo_variable();
	}
}


unsigned char scrutation_clavier(void)
{
	unsigned char i;
	unsigned char code_Touche = 0xFF;
	P4 = 0b11101111;
	for(i=0;((i<4)&&(code_Touche==0xFF));i++)
	{	
		if ( ((P4&(1<<0)) == 0x00)||((P4&(1<<1)) == 0x00)||((P4&(1<<2)) == 0x00)||((P4&(1<<3)) == 0x00) )
		{
				code_Touche = P4;
				i=4;
		}
		else
		{
				P4 = P4 <<1;
				P4 = P4|(1<<0);
		}
	}
	return code_Touche;
}

unsigned char Transcodage(unsigned char code_Touche)
{ 
	unsigned char i;
	unsigned char code_reel = 0xFF;
	unsigned char Tab_Code_Touche[16]={0x7D,0xEE,0xED,0xEB,0xDE,0xDD,0xDB,0xBE,0xBD,0xBB,0x7E,0x7B,0x77,0xB7,0xD7,0xE7};

	for(i=0;((i<16)&&(code_reel==0xFF));i++)
	{	
		if (Tab_Code_Touche[i]== code_Touche)
		{
				code_reel = i;
		}
		else
		{}
	}
	return code_reel;
}

void tempo10ms(unsigned short i)
{
		unsigned short k,j;
		for ( j=0 ; j<i;j++)
		{
			for(k=0; k<4950;k++)
			{
			}
		}
} 

void decalage_gauche(void)
{	
		if ((P1&(1<<7))==0)
		{
				P1 = P1 <<1;
		}
		else
		{
				P1 = P1<<1;
				P1=P1|0b00000001;
		}
} 

void decalage_droite(void)
{	
		if ((P1&(1<<0))==0)
		{
				P1 = P1 >>1;
		}
		else
		{
				P1 = P1>>1;
				P1=P1|0b10000000;
		}
} 

void tempo_variable(void)
{
	
	unsigned char var, nb;
	var = scrutation_clavier();
    	nb = Transcodage (var);
		
			if (nb==0x)
			{
				tempo10ms(10);
			}
			else
			{}
	

			if (nb==0x)
			{
				tempo10ms(50);
			}
			else
			{}

			if (nb==0x)
			{
				tempo10ms(100);
			}
			else
			{}

			if (nb==0x)
			{
				tempo10ms(200);
			}
			else
			{}
		
} 

